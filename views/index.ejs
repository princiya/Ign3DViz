
<html>
	<meta charset="utf-8">
	<head>
		<title>Ignition Transport Library</title>
		<script src="/scripts/jquery.min.js" type="text/javascript"></script>
		<script src="/scripts/d3.v3.min.js" type="text/javascript"></script>
		<link rel="stylesheet" type="text/css" href="/stylesheets/style.css"/>
	</head>
	<body>
		<div class="right">
			
		</div>

		<div class="left">

		</div>

		<script>

			var timer1 = 0;
			function printRecursive(n) {
				if(n == 0) 
					return;
				clearTimeout(timer1);
				timer1 = setTimeout(function() {
					$.ajax({ 
						url: '/printNumber/'+(n*50),
						success: function(data) {
							$('.right').append(""+data+"");
							printRecursive(--n);
						}
					});
				}, 3000);
			}
			printRecursive(10);

			var diameter = 550,
			    format = d3.format(",d");

			var pack = d3.layout.pack()
			    .size([diameter - 4, diameter - 4])
			    .value(function(d) { return d.size; });

			var root = {};

			$.ajax({ 
			   url: '/jsonOutput',
			   success: function(data){
				   root = data;
				   draw();
				   drawRecursive(5);
			   }
			});
			
			d3.select(self.frameElement).style("height", diameter + "px");

			var timer = 0;

			function drawRecursive(n) {
				if(n == 0) 
					return;
				clearTimeout(timer);
				timer = setTimeout(function() {
					var topic = n % 3;
					$.ajax({ 
						url: '/jsonOutput/'+n,
						success: function(data) {
							var length = root.children[topic].children.length;

							root.children[topic].children[length] = data;
							$(".left").empty();
							draw();
							drawRecursive(--n);
						}
					});
				}, 3000);
			}

			function draw() {
				var svg = d3.select(".left").append("svg")
			    		.attr("width", diameter)
			    		.attr("height", diameter)
			  			.append("g")
			    		.attr("transform", "translate(2,2)");

				var node = svg.datum(root).selectAll(".node")
					      		.data(pack.nodes)
					    		.enter().append("g")
					      		.attr("class", function(d) { return d.children ? "node" : "leaf node "+d.name; })
					      		.attr("transform", function(d) { 
					      								//alert("Name: "+d.name+" X: "+d.x+" R: "+d.r+" Value: "+d.value+" Parent: "+d.parent+" Depth: "+d.depth+" Size: "+d.size); 
					      								return "translate(" + d.x + "," + d.y + ")"; 
					      							});

					  node.append("title")
					      .text(function(d) { return d.name + (d.children ? "" : ": " + format(d.size)); });

					  node.append("circle")
					      .attr("r", function(d) { return d.r; });

					  node.filter(function(d) { return !d.children; }).append("text")
					      .attr("dy", ".3em")
					      .style("text-anchor", "middle")
					      .text(function(d) { return d.name.substring(0, d.r / 3); });
			}

		</script>
	</body>
</html>